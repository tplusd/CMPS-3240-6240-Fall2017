import pandas as pd
import numpy as np

from sklearn.metrics import confusion_matrix
from sklearn.preprocessing import LabelEncoder
from sklearn import metrics

Train = pd.read_csv("/Users/tplusd/Desktop/Machine learning project/train.csv")
Train['new_index'] = range(0,3800,1)
Train=Train.set_index('new_index')
Train = Train[['HomeTeam','AwayTeam','Home ELO rank','Away ELO rank','Result','Home Point','Away Point','Home Streak','Away Streak','Round','Advanced result']]
Test = pd.read_csv("/Users/tplusd/Desktop/Machine learning project/test.csv")
Test['new_index'] = range(0,760,1)
Test=Test.set_index('new_index')
Test = Test[['HomeTeam','AwayTeam','Home ELO rank','Away ELO rank','Result','Home Point','Away Point','Home Streak','Away Streak','Round','Advanced result']]

Total_data =Train.append(Test)

#number = LabelEncoder()
#Total_data['HomeTeam']=number.fit_transform(Total_data['HomeTeam'].astype('str'))
#Total_data['AwayTeam']=number.fit_transform(Total_data['AwayTeam'].astype('str'))
Total_data['new_index'] = range(0,4560,1)
Total_data=Total_data.set_index('new_index')

#HomeTeam_dat=pd.get_dummies(Total_data,prefix=['HomeTeam'])
INPUT=Total_data[['HomeTeam','AwayTeam','Home ELO rank','Away ELO rank','Home Streak','Away Streak']]
INPUT=pd.get_dummies(INPUT,columns=['HomeTeam'])
INPUT=pd.get_dummies(INPUT,columns=['AwayTeam'])

train_input=INPUT[0:3800]
test_input=INPUT[3800:4560]



number2 = LabelEncoder()
Total_data['Result']=number2.fit_transform(Total_data['Result'].astype('str'))
#Test['Result']=number2.fit_transform(Train['Result'].astype('str'))
#Total_data=pd.get_dummies(Total_data,columns=['HomeTeam'])
#Total_data=pd.get_dummies(Total_data,columns=['AwayTeam'])
#train_input=Train[['HomeTeam','AwayTeam','Home ELO rank','Away ELO rank','Home Streak','Away Streak']]
#train_input=np.mat(train_data)
#train_output=Train[['Result']]
#train_output=np.mat(train_output)
#np.shape(train_output)

train_output=Total_data['Result'][0:3800]
test_output=Total_data['Result'][3800:4560]
#svm = LinearSVC(C=100)

train_input=np.array(train_input)
train_output = np.array(train_output)
test_input=np.array(test_input)
test_output = np.array(test_output)


# using svm with gaussian kernel
from sklearn.svm import SVC
svm=SVC(kernel='rbf',gamma =0.001 ,C=2.75)
svm.fit(train_input,train_output)
print(svm.score(train_input, train_output))
p=svm.predict(test_input)
print(metrics.accuracy_score(test_output,p))
print(p)

print(confusion_matrix(test_output,p))
p=svm.predict(train_input)
print(confusion_matrix(train_output,p))
#test_output
train_input


# using svm with gaussian kernel but using ovo
from sklearn.svm import SVC
svm=SVC(kernel='rbf',gamma =0.001 ,C=2.75,decision_function_shape='ovo')
svm.fit(train_input,train_output)
print(svm.score(train_input, train_output))
p=svm.predict(test_input)
print(metrics.accuracy_score(test_output,p))
print(p)

print(confusion_matrix(test_output,p))
p=svm.predict(train_input)
print(confusion_matrix(train_output,p))
#test_output
train_input

# multiclass learning: Pairwise

from sklearn.multiclass import OneVsOneClassifier
from sklearn.svm import SVC
svm=SVC(kernel='rbf',gamma =0.001 ,C=2.75,decision_function_shape='ovo')
classifier=OneVsOneClassifier(svm)
classifier.fit(train_input,train_output)
print(classifier.score(train_input, train_output))
p=classifier.predict(test_input)
print(metrics.accuracy_score(test_output,p))
print(p)

print(confusion_matrix(test_output,p))
p=classifier.predict(train_input)
print(confusion_matrix(train_output,p))
#test_output
train_input

# multiclass learning: One vs All
from sklearn.multiclass import OneVsRestClassifier
from sklearn.svm import SVC
svm=SVC(kernel='rbf',gamma =0.001 ,C=2.75)
classifier=OneVsRestClassifier(svm)
classifier.fit(train_input,train_output)
print(classifier.score(train_input, train_output))
p=classifier.predict(test_input)
print(metrics.accuracy_score(test_output,p))
print(p)

print(confusion_matrix(test_output,p))
p=classifier.predict(train_input)
print(confusion_matrix(train_output,p))
#test_output
train_input

#grid search  pairwise
import numpy as np
from sklearn.svm import SVC
import pandas as pd
Cseries=[0.01,0.25,0.5,0.75,1,1.25,1.5,1.75,2,2.25,2.5,2.75,3]
gammaseries=[0.000001,0.00001,0.0001,0.001,0.01,0.1,1,2,5,10,100,1000]
accuracy_train=[]
accuracy_test=[]
data=[]


for j in range(0,len(Cseries)):
    a=Cseries[j]
    #Cseries.append(a)
    for i in range(0,len(gammaseries)):
        b=gammaseries[i]
        #gammaseries.append(b)
        row=[]
        svm=SVC(kernel='rbf',gamma = b,C=a,decision_function_shape='ovo')
        svm.fit(train_input,train_output)
        print(svm.score(train_input, train_output))
        p=svm.predict(test_input)
        print(metrics.accuracy_score(test_output,p))
        #print(p)
        
        #print(confusion_matrix(test_output,p))
        accuracy_train.append(svm.score(train_input, train_output))
        accuracy_test.append(metrics.accuracy_score(test_output,p))
        row.append(Cseries[j])
        row.append(gammaseries[i])
        row.append(svm.score(train_input, train_output))
        row.append(metrics.accuracy_score(test_output,p))
        data.append(row)
print(Cseries)
print(gammaseries)
print(accuracy_train)
print(accuracy_test)

print(data)
df = pd.DataFrame(data)
df.to_csv("/Users/tplusd/Desktop/Machine learning project/SVM_onevsone.csv")

import matplotlib.pyplot as plt
import numpy as np
from matplotlib.colors import ListedColormap
import numpy as np
x= ['0.01','0.25','0.5','0.75','1','1.25','1.5','1.75','2','2.25','2.5','2.75','3']
y= [0.000001,0.00001,0.0001,0.001,0.01,0.1,1,2,5,10,100,1000]
cMap = ListedColormap(['white', 'green', 'blue','orange','red'])
Candgamma = pd.read_csv("/Users/tplusd/Desktop/Machine learning project/SVM_onevsone.csv",header=None)
Candgamma=Candgamma[3]
Candgamma=np.array(Candgamma)
test_accuracy=[]
for i in range(0,len(y)):
    row=[]
    for j in range(0,len(x)):
        
        row.append(Candgamma[i*len(x)+j])
    test_accuracy.append(row)
test_accuracy

fig,ax=plt.subplots()
heatmap=ax.pcolor(test_accuracy,cmap='RdBu')
cbar=plt.colorbar(heatmap)
column_labels=['0.01','0.25','0.5','0.75','1','1.25','1.5','1.75','2','2.25','2.5','2.75','3']
row_labels=[0.000001,0.00001,0.0001,0.001,0.01,0.1,1,2,5,10,100,1000]
X=range(1,14)
Y=range(1,13)
ax.set_xticks(X)
ax.set_yticks(Y)


ax.set_xticklabels(column_labels, minor=False)
ax.set_yticklabels(row_labels, minor=False)
ax.set_xlabel('C value')
ax.set_ylabel('gamma value')
fig
plt.savefig("/Users/tplusd/Desktop/Machine learning project/grid search 3.png")
plt.show()
