import pandas as pd
import numpy as np

from sklearn.metrics import confusion_matrix
from sklearn.preprocessing import LabelEncoder
from sklearn import metrics

Train = pd.read_csv("/Users/tplusd/Desktop/Machine learning project/train.csv")
Train['new_index'] = range(0,3800,1)
Train=Train.set_index('new_index')
Train = Train[['HomeTeam','AwayTeam','Home ELO rank','Away ELO rank','Result','Home Point','Away Point','Home Streak','Away Streak','Round','Advanced result']]
Test = pd.read_csv("/Users/tplusd/Desktop/Machine learning project/test.csv")
Test['new_index'] = range(0,760,1)
Test=Test.set_index('new_index')
Test = Test[['HomeTeam','AwayTeam','Home ELO rank','Away ELO rank','Result','Home Point','Away Point','Home Streak','Away Streak','Round','Advanced result']]

Total_data =Train.append(Test)

#number = LabelEncoder()
#Total_data['HomeTeam']=number.fit_transform(Total_data['HomeTeam'].astype('str'))
#Total_data['AwayTeam']=number.fit_transform(Total_data['AwayTeam'].astype('str'))
Total_data['new_index'] = range(0,4560,1)
Total_data=Total_data.set_index('new_index')

#HomeTeam_dat=pd.get_dummies(Total_data,prefix=['HomeTeam'])
INPUT=Total_data[['HomeTeam','AwayTeam','Home ELO rank','Away ELO rank','Home Streak','Away Streak']]
INPUT=pd.get_dummies(INPUT,columns=['HomeTeam'])
INPUT=pd.get_dummies(INPUT,columns=['AwayTeam'])

train_input=INPUT[0:3800]
test_input=INPUT[3800:4560]



number2 = LabelEncoder()
Total_data['Result']=number2.fit_transform(Total_data['Result'].astype('str'))
#Test['Result']=number2.fit_transform(Train['Result'].astype('str'))
#Total_data=pd.get_dummies(Total_data,columns=['HomeTeam'])
#Total_data=pd.get_dummies(Total_data,columns=['AwayTeam'])
#train_input=Train[['HomeTeam','AwayTeam','Home ELO rank','Away ELO rank','Home Streak','Away Streak']]
#train_input=np.mat(train_data)
#train_output=Train[['Result']]
#train_output=np.mat(train_output)
#np.shape(train_output)

train_output=Total_data['Result'][0:3800]
test_output=Total_data['Result'][3800:4560]
#svm = LinearSVC(C=100)

train_input=np.array(train_input)
train_output = np.array(train_output)
test_input=np.array(test_input)
test_output = np.array(test_output)


# try different parameters
import numpy as np
from sklearn.ensemble import RandomForestClassifier
import pandas as pd
Sseries=[2,3,4,5,6,7,8]
Tseries=[10,30,50,70,90,110,130]
accuracy_train=[]
accuracy_test=[]
data=[]


for j in range(0,len(Sseries)):
    a=Sseries[j]
    #Cseries.append(a)
    for i in range(0,len(Tseries)):
        b=Tseries[i]
        #gammaseries.append(b)
        row=[]
        rdf=RandomForestClassifier(n_estimators=b,min_samples_split=a)
        rdf.fit(train_input,train_output)
        test_predict=rdf.predict(test_input)
        print(rdf.score(train_input,train_output))
        print(metrics.accuracy_score(test_output,test_predict))
        print(test_predict)
        print(confusion_matrix(test_output,test_predict))
        #print(p)
        
        #print(confusion_matrix(test_output,p))
        accuracy_train.append(rdf.score(train_input, train_output))
        accuracy_test.append(metrics.accuracy_score(test_output,test_predict))
        row.append(Sseries[j])
        row.append(Tseries[i])
        row.append(rdf.score(train_input, train_output))
        row.append(metrics.accuracy_score(test_output,test_predict))
        data.append(row)
print(Sseries)
print(Tseries)
print(accuracy_train)
print(accuracy_test)

print(data)
df = pd.DataFrame(data)
df.to_csv("/Users/tplusd/Desktop/Machine learning project/Randomforest.csv")



# decided to use 110 and 8
from sklearn.ensemble import RandomForestClassifier
rdf=RandomForestClassifier(n_estimators=110,min_samples_split=8)
rdf.fit(train_input,train_output)
test_predict=rdf.predict(test_input)
print(rdf.score(train_input,train_output))
print(metrics.accuracy_score(test_output,test_predict))
print(test_predict)
print(confusion_matrix(test_output,test_predict))



# random forest with different weights
from sklearn.ensemble import RandomForestClassifier
import pandas as pd
weightserie=[]
accuracy_train=[]
accuracy_test=[]
data=[]
n=0
for j in range(0,100):
    c=j*0.1
    weight=[]
    weightserie.append(c)
    n=n+1
    
    for i in range(0,len(train_output)):
        
        if train_output[i] == 0:
        
            weight.append(c)
        else:
            weight.append(1)

    row=[]
    print(n)
    rdf=RandomForestClassifier(n_estimators=110,min_samples_split=8)
    rdf.fit(train_input,train_output,sample_weight=weight)
    test_predict=rdf.predict(test_input)
    print(rdf.score(train_input,train_output))
    print(metrics.accuracy_score(test_output,test_predict))
    
    print(confusion_matrix(test_output,test_predict))
    row=[]
    
  
    
    accuracy_train.append(rdf.score(train_input, train_output))
    accuracy_test.append(metrics.accuracy_score(test_output,test_predict))
    row.append(c)
    row.append(rdf.score(train_input, train_output))
    row.append(metrics.accuracy_score(test_output,test_predict))
    data.append(row)
    
print(weightserie)
print(accuracy_train)
print(accuracy_test)

df = pd.DataFrame(data)
df.to_csv("/Users/tplusd/Desktop/Machine learning project/Randomforest2.csv")
